services:
    jobmanager:
        build: ./flink_service
        hostname: jobmanager
        ports:
            - "8081:8081" # Flink Web UI
        environment:
            FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager"
        command: jobmanager

    taskmanager:
        build: ./flink_service
        hostname: taskmanager
        environment:
            FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager"
        depends_on:
            - jobmanager
        command: taskmanager

    zoo1:
        image: confluentinc/cp-zookeeper:7.8.0
        hostname: zoo1
        ports:
            - "${ZOOKEEPER_PORT}:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_SERVERS: zoo1:2888:3888

    kafka1:
        image: confluentinc/cp-kafka:7.8.0
        hostname: kafka1
        ports:
            - "${KAFKA_PORT}:9092"
            - "29092:29092"
            - "9999:9999"
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_JMX_PORT: 9999
            KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
            KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
        depends_on:
            - zoo1

    redis:
        image: redis:7-alpine
        hostname: redis
        env_file:
            - .env
        ports:
            - "${REDIS_PORT}:6379"
        volumes:
            - ./config/redis.conf:/usr/local/etc/redis/redis.conf
            - redis_data:/data
        command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
            interval: 5s
            timeout: 3s
            retries: 5

    postgres:
        image: postgres:17
        hostname: postgres
        env_file:
            - .env
        ports:
            - "${POSTGRES_PORT}:5432"
        volumes:
            - pg_data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: analytics
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U admin -d analytics"]
            interval: 5s
            timeout: 5s
            retries: 5

    flink_service:
        build: ./flink_service
        env_file:
            - .env
        volumes:
            - ./flink_service/src:/app/src
        environment:
            FLINK_PROPERTIES: "jobmanager.rpc.address: jobmanager"
        depends_on:
            - jobmanager
            - taskmanager
            - kafka1
            - redis
        command: [ "bash", "scripts/start_consumer.sh" ]
        working_dir: /app

    fastapi_service:
        build: ./fastapi_service
        env_file:
            - .env
        ports:
            - "${FASTAPI_PORT}:8000"
        volumes:
            - ./fastapi_service/src:/app/src
        depends_on:
            - redis
        command: [ "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload" ]

    sync_service:
        build: ./sync_service
        env_file:
            - .env
        volumes:
            - ./sync_service/src:/app/src
        depends_on:
            - postgres
            - redis
        restart: unless-stopped

volumes:
    redis_data:
    pg_data: